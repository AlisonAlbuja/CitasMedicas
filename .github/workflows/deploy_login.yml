name: Docker Image CI/CD for Login Service

on:
  push:
    branches:
      - Folder-Organization
    paths:
      - 'BACKEND/appointment_management/login_service/**'
  pull_request:
    branches: ["Folder-Organization"]
    paths:
      - 'BACKEND/appointment_management/login_service/**'

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and Push Docker Image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/login_service:latest \
          --file BACKEND/appointment_management/login_service/Dockerfile \
          BACKEND/appointment_management/login_service/ \
          --build-arg DB_HOST=${{ secrets.DB_HOST_AUTH }} \3
          --build-arg DB_USER=${{ secrets.DB_USER_AUTH }} \
          --build-arg DB_PASSWORD=${{ secrets.DB_PASSWORD_AUTH }} \
          --build-arg DB_NAME=${{ secrets.DB_NAME_AUTH }} \
          --build-arg DB_PORT=${{ secrets.DB_PORT }} \
          --build-arg SERVER_PORT=${{ secrets.SERVER_PORT_LOGIN_SERVICE }}
        docker push ${{ secrets.DOCKER_USERNAME }}/login_service:latest

  deploy-aws:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
    - name: Set permissions for private key
      run: |
        echo "${{ secrets.EC2_SSH_KEY }}" > key.pem
        chmod 600 key.pem

    - name: Deploy Docker Container on EC2
      run: |
        ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.EC2_HOST_LOGIN_SERVICE }} << 'EOF'
        # login system
        sudo yum login -y

        # Install Docker if not present
        if ! command -v docker &> /dev/null; then
          sudo yum install -y docker
          sudo systemctl start docker
          sudo systemctl enable docker
        fi

        # Ensure Docker is running
        sudo systemctl start docker
        sudo systemctl enable docker

        # Stop and remove the existing container
        sudo docker stop login_service || true
        sudo docker rm login_service || true

        # Pull latest image
        sudo docker pull ${{ secrets.DOCKER_USERNAME }}/login_service:latest

        # Run new container
        sudo docker run -d \
          --name login_service \
          -p 8000:8000 \
          -e DB_HOST=${{ secrets.DB_HOST_AUTH }} \
          -e DB_USER=${{ secrets.DB_USER_AUTH }} \
          -e DB_PASSWORD=${{ secrets.DB_PASSWORD_AUTH }} \
          -e DB_NAME=${{ secrets.DB_NAME_AUTH }} \
          -e DB_PORT=${{ secrets.DB_PORT }} \
          -e SERVER_PORT=${{ secrets.SERVER_PORT_LOGIN_SERVICE }} \
          ${{ secrets.DOCKER_USERNAME }}/login_service:latest

        # Remove unused images
        sudo docker image prune -f
        EOF
