name: Build, Push, and Deploy Login

on:
  push:
    branches: [ "Folder-Organization" ]
    paths:
      - "BACKEND/auth/login/**"

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and Push Docker Image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/login:latest ./BACKEND/auth/login/
        docker push ${{ secrets.DOCKER_USERNAME }}/login:latest

  deploy-aws:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
    - name: Set permissions for private key
      run: |
        echo "${{ secrets.EC2_SSH_KEY }}" > key.pem
        chmod 600 key.pem

    - name: Deploy to EC2
      run: |
        ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@${{ secrets.EC2_HOST_LOGIN }} << 'EOF'
        # 1) Actualizar el sistema e instalar Docker si no está presente
        sudo yum update -y
        if ! command -v docker &> /dev/null
        then
          echo "Docker no encontrado, instalando..."
          sudo yum install -y docker
          sudo systemctl start docker
          sudo systemctl enable docker
        fi

        # 2) Generar el archivo .env en el servidor EC2
        echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env
        echo "DOCTOR_DATABASE_URL=${{ secrets.DOCTOR_DATABASE_URL }}" >> .env
        echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> .env
        echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> .env
        echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
        echo "ALGORITHM=${{ secrets.ALGORITHM }}" >> .env

        # 3) Detener y eliminar contenedor previo
        sudo docker stop login-container || true
        sudo docker rm login-container || true

        # 4) Descargar la nueva imagen desde Docker Hub
        sudo docker pull ${{ secrets.DOCKER_USERNAME }}/login:latest

        # 5) Ejecutar el contenedor con el .env
        sudo docker run -d --env-file .env -p 8000:8000 --name login-container ${{ secrets.DOCKER_USERNAME }}/login:latest

        # 6) Limpiar imágenes antiguas para ahorrar espacio
        sudo docker image prune -f
        EOF
