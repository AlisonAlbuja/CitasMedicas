{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ASUS\\\\Documents\\\\Programaci\\xF3n_Distribuida\\\\MedicalAppointments\\\\FRONTEND\\\\src\\\\pages\\\\Login.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { loginUser } from '../utils/api';\nimport { jwtDecode } from 'jwt-decode'; // Cambiar a importación nombrada\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = () => {\n  _s();\n  const [credentials, setCredentials] = useState({\n    username: '',\n    password: ''\n  });\n  const navigate = useNavigate();\n  const handleLogin = async e => {\n    e.preventDefault();\n    try {\n      const data = await loginUser(credentials); // Llama al endpoint de login\n      const token = data.access_token; // Obtén el token del backend\n      localStorage.setItem('token', token); // Guarda el token en localStorage\n\n      // Decodificar el token para obtener el role_id\n      const decodedToken = jwtDecode(token); // Decodifica el token\n      const roleId = decodedToken.role_id; // Extrae el role_id del token\n      localStorage.setItem('role', roleId); // Guarda el role_id en localStorage\n\n      // Redirige según el rol del usuario\n      if (roleId === 1) navigate('/admin'); // Administrador\n      else if (roleId === 2) navigate('/doctor'); // Doctor\n      else if (roleId === 3) navigate('/patient'); // Paciente\n      else throw new Error('Rol desconocido');\n    } catch (error) {\n      console.error('Error al iniciar sesión:', error);\n      alert('Error al iniciar sesión. Verifique sus credenciales.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleLogin,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Inicio de Sesi\\xF3n\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Usuario\",\n      value: credentials.username,\n      onChange: e => setCredentials({\n        ...credentials,\n        username: e.target.value\n      }),\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"password\",\n      placeholder: \"Contrase\\xF1a\",\n      value: credentials.password,\n      onChange: e => setCredentials({\n        ...credentials,\n        password: e.target.value\n      }),\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Iniciar Sesi\\xF3n\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n_s(Login, \"nmgvPpIPaiuIEJ67HP0QumxwePI=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useNavigate","loginUser","jwtDecode","jsxDEV","_jsxDEV","Login","_s","credentials","setCredentials","username","password","navigate","handleLogin","e","preventDefault","data","token","access_token","localStorage","setItem","decodedToken","roleId","role_id","Error","error","console","alert","onSubmit","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","target","required","_c","$RefreshReg$"],"sources":["C:/Users/ASUS/Documents/Programación_Distribuida/MedicalAppointments/FRONTEND/src/pages/Login.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { loginUser } from '../utils/api';\r\nimport { jwtDecode } from 'jwt-decode'; // Cambiar a importación nombrada\r\n\r\nconst Login = () => {\r\n    const [credentials, setCredentials] = useState({ username: '', password: '' });\r\n    const navigate = useNavigate();\r\n\r\n    const handleLogin = async (e) => {\r\n        e.preventDefault();\r\n        try {\r\n            const data = await loginUser(credentials); // Llama al endpoint de login\r\n            const token = data.access_token; // Obtén el token del backend\r\n            localStorage.setItem('token', token); // Guarda el token en localStorage\r\n\r\n            // Decodificar el token para obtener el role_id\r\n            const decodedToken = jwtDecode(token); // Decodifica el token\r\n            const roleId = decodedToken.role_id; // Extrae el role_id del token\r\n            localStorage.setItem('role', roleId); // Guarda el role_id en localStorage\r\n\r\n            // Redirige según el rol del usuario\r\n            if (roleId === 1) navigate('/admin'); // Administrador\r\n            else if (roleId === 2) navigate('/doctor'); // Doctor\r\n            else if (roleId === 3) navigate('/patient'); // Paciente\r\n            else throw new Error('Rol desconocido');\r\n        } catch (error) {\r\n            console.error('Error al iniciar sesión:', error);\r\n            alert('Error al iniciar sesión. Verifique sus credenciales.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleLogin}>\r\n            <h1>Inicio de Sesión</h1>\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"Usuario\"\r\n                value={credentials.username}\r\n                onChange={(e) => setCredentials({ ...credentials, username: e.target.value })}\r\n                required\r\n            />\r\n            <input\r\n                type=\"password\"\r\n                placeholder=\"Contraseña\"\r\n                value={credentials.password}\r\n                onChange={(e) => setCredentials({ ...credentials, password: e.target.value })}\r\n                required\r\n            />\r\n            <button type=\"submit\">Iniciar Sesión</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}